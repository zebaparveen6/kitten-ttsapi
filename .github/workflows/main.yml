name: TTS via repository_dispatch

on:
  repository_dispatch:
    types: [start_ollama]

jobs:
  tts_and_respond:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout code (if needed)
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install soundfile
          pip install https://github.com/KittenML/KittenTTS/releases/download/0.1/kittentts-0.1.0-py3-none-any.whl
          pip install requests

      - name: Generate TTS audio from payload
        id: generate
        run: |
          python - << 'EOF'
          import os, soundfile as sf
          from kittentts import KittenTTS

          payload = os.environ
          chat_id = payload["CHAT_ID"]
          text = payload["ORIG_MSG"]
          voice = payload.get("VOICE", "expr-voice-2-f")
          fname = "tts_output.wav"

          m = KittenTTS("KittenML/kitten-tts-nano-0.1")
          audio = m.generate(text, voice=voice)
          sf.write(fname, audio, 24000)

          print(f"FILENAME={fname}")
          EOF
        env:
          CHAT_ID: ${{ github.event.client_payload.telegram_chat_id }}
          ORIG_MSG: ${{ github.event.client_payload.original_message }}
          VOICE: ${{ github.event.client_payload.voice || 'expr-voice-2-f' }}

      - name: Send the voice message back to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ github.event.client_payload.telegram_chat_id }}
        run: |
          curl -s -X POST \
            -H "Content-Type: multipart/form-data" \
            -F chat_id="$CHAT_ID" \
            -F voice="@tts_output.wav" \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendVoice"
